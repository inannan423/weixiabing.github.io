{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"白嫖cloudflare搭建属于自己的git加速站","slug":"1","date":"2022-01-20T14:31:40.000Z","updated":"2022-01-26T10:37:23.255Z","comments":true,"path":"2022/01/20/1/","link":"","permalink":"http://example.com/2022/01/20/1/","excerpt":"","text":"不想自己动手的话，文末也有搭建好的，可以直接去白嫖！ 基于开源项目gh-proxy地址：–&gt;点击访问&lt;– cloudflare地址:–&gt;点击访问&lt;– 首先访问cloudflare注册一个你自己的账户 然后点击workers 之后弹出来这个界面，你需要在输入框中输入你自己的workers的名字 请注意！一定要方便记忆，不要乱输，这个会出现在你的网址中！！！ 请注意！一定要方便记忆，不要乱输，这个会出现在你的网址中！！！ 请注意！一定要方便记忆，不要乱输，这个会出现在你的网址中！！！ 输入好后点set up 然后选择订阅模式，白嫖怪直接free！ 免费版本每天的访问次数是10w次，应该是远远够用的！ 然后要验证邮箱！ 去你邮箱完成验证 验证完成后刷新，点击创建 然后按下图填写，之后点创建 然后点击快速编辑 将下面的代码复制 —&gt;点击查看源码&lt;– 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148&#x27;use strict&#x27;/** * static files (404.html, sw.js, conf.js) */const ASSET_URL = &#x27;https://hunshcn.github.io/gh-proxy/&#x27;// 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 &#x27;/gh/&#x27;，注意，少一个杠都会错！const PREFIX = &#x27;/&#x27;// git使用cnpmjs镜像、分支文件使用jsDelivr镜像的开关，0为关闭，默认开启const Config = &#123; jsdelivr: 1, cnpmjs: 1&#125;/** @type &#123;RequestInit&#125; */const PREFLIGHT_INIT = &#123; status: 204, headers: new Headers(&#123; &#x27;access-control-allow-origin&#x27;: &#x27;*&#x27;, &#x27;access-control-allow-methods&#x27;: &#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;, &#x27;access-control-max-age&#x27;: &#x27;1728000&#x27;, &#125;),&#125;const exp1 = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:releases|archive)\\/.*$/iconst exp2 = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:blob|raw)\\/.*$/iconst exp3 = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:info|git-).*$/iconst exp4 = /^(?:https?:\\/\\/)?raw\\.(?:githubusercontent|github)\\.com\\/.+?\\/.+?\\/.+?\\/.+$/iconst exp5 = /^(?:https?:\\/\\/)?gist\\.(?:githubusercontent|github)\\.com\\/.+?\\/.+?\\/.+$/iconst exp6 = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/tags.*$/i/** * @param &#123;any&#125; body * @param &#123;number&#125; status * @param &#123;Object&lt;string, string&gt;&#125; headers */function makeRes(body, status = 200, headers = &#123;&#125;) &#123; headers[&#x27;access-control-allow-origin&#x27;] = &#x27;*&#x27; return new Response(body, &#123;status, headers&#125;)&#125;/** * @param &#123;string&#125; urlStr */function newUrl(urlStr) &#123; try &#123; return new URL(urlStr) &#125; catch (err) &#123; return null &#125;&#125;addEventListener(&#x27;fetch&#x27;, e =&gt; &#123; const ret = fetchHandler(e) .catch(err =&gt; makeRes(&#x27;cfworker error:\\n&#x27; + err.stack, 502)) e.respondWith(ret)&#125;)function checkUrl(u) &#123; for (let i of [exp1, exp2, exp3, exp4, exp5, exp6 ]) &#123; if (u.search(i) === 0) &#123; return true &#125; &#125; return false&#125;/** * @param &#123;FetchEvent&#125; e */async function fetchHandler(e) &#123; const req = e.request const urlStr = req.url const urlObj = new URL(urlStr) let path = urlObj.searchParams.get(&#x27;q&#x27;) if (path) &#123; return Response.redirect(&#x27;https://&#x27; + urlObj.host + PREFIX + path, 301) &#125; // cfworker 会把路径中的 `//` 合并成 `/` path = urlObj.href.substr(urlObj.origin.length + PREFIX.length).replace(/^https?:\\/+/, &#x27;https://&#x27;) if (path.search(exp1) === 0 || path.search(exp5) === 0 || path.search(exp6) === 0 || !Config.cnpmjs &amp;&amp; (path.search(exp3) === 0 || path.search(exp4) === 0)) &#123; return httpHandler(req, path) &#125; else if (path.search(exp2) === 0) &#123; if (Config.jsdelivr) &#123; const newUrl = path.replace(&#x27;/blob/&#x27;, &#x27;@&#x27;).replace(/^(?:https?:\\/\\/)?github\\.com/, &#x27;https://cdn.jsdelivr.net/gh&#x27;) return Response.redirect(newUrl, 302) &#125; else &#123; path = path.replace(&#x27;/blob/&#x27;, &#x27;/raw/&#x27;) return httpHandler(req, path) &#125; &#125; else if (path.search(exp3) === 0) &#123; const newUrl = path.replace(/^(?:https?:\\/\\/)?github\\.com/, &#x27;https://github.com.cnpmjs.org&#x27;) return Response.redirect(newUrl, 302) &#125; else if (path.search(exp4) === 0) &#123; const newUrl = path.replace(/(?&lt;=com\\/.+?\\/.+?)\\/(.+?\\/)/, &#x27;@$1&#x27;).replace(/^(?:https?:\\/\\/)?raw\\.(?:githubusercontent|github)\\.com/, &#x27;https://cdn.jsdelivr.net/gh&#x27;) return Response.redirect(newUrl, 302) &#125; else &#123; return fetch(ASSET_URL + path) &#125;&#125;/** * @param &#123;Request&#125; req * @param &#123;string&#125; pathname */function httpHandler(req, pathname) &#123; const reqHdrRaw = req.headers // preflight if (req.method === &#x27;OPTIONS&#x27; &amp;&amp; reqHdrRaw.has(&#x27;access-control-request-headers&#x27;) ) &#123; return new Response(null, PREFLIGHT_INIT) &#125; const reqHdrNew = new Headers(reqHdrRaw) let urlStr = pathname if (urlStr.startsWith(&#x27;github&#x27;)) &#123; urlStr = &#x27;https://&#x27; + urlStr &#125; const urlObj = newUrl(urlStr) /** @type &#123;RequestInit&#125; */ const reqInit = &#123; method: req.method, headers: reqHdrNew, redirect: &#x27;manual&#x27;, body: req.body &#125; return proxy(urlObj, reqInit)&#125;/** * * @param &#123;URL&#125; urlObj * @param &#123;RequestInit&#125; reqInit */async function proxy(urlObj, reqInit) &#123; const res = await fetch(urlObj.href, reqInit) const resHdrOld = res.headers const resHdrNew = new Headers(resHdrOld) const status = res.status if (resHdrNew.has(&#x27;location&#x27;)) &#123; let _location = resHdrNew.get(&#x27;location&#x27;) if (checkUrl(_location)) resHdrNew.set(&#x27;location&#x27;, PREFIX + _location) else &#123; reqInit.redirect = &#x27;follow&#x27; return proxy(newUrl(_location), reqInit) &#125; &#125; resHdrNew.set(&#x27;access-control-expose-headers&#x27;, &#x27;*&#x27;) resHdrNew.set(&#x27;access-control-allow-origin&#x27;, &#x27;*&#x27;) resHdrNew.delete(&#x27;content-security-policy&#x27;) resHdrNew.delete(&#x27;content-security-policy-report-only&#x27;) resHdrNew.delete(&#x27;clear-site-data&#x27;) return new Response(res.body, &#123; status, headers: resHdrNew, &#125;)&#125; 替换掉原来所有代码，先点下面的保存，等待保存成功后，再点发送 显示如下就成功了 到此教程结束，喜欢的点个赞再走吧！","categories":[],"tags":[{"name":"cf","slug":"cf","permalink":"http://example.com/tags/cf/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-01-20T11:09:01.115Z","updated":"2022-01-20T11:05:20.996Z","comments":true,"path":"2022/01/20/hello-world/","link":"","permalink":"http://example.com/2022/01/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"cf","slug":"cf","permalink":"http://example.com/tags/cf/"}]}