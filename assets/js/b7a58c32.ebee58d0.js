"use strict";(self.webpackChunkniko=self.webpackChunkniko||[]).push([[1433],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),o=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=o(n),m=r,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||p;return n?a.createElement(y,l(l({ref:t},c),{},{components:n})):a.createElement(y,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,l=new Array(p);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var o=2;o<p;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>p,metadata:()=>i,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const p={description:"TypeScript Challenges \u7b14\u8bb0",keywords:["typescript"],image:"https://picgo-1259617372.cos.ap-beijing.myqcloud.com/Picgo/2022/01/19-11-28-23-404Lab.jpeg",tags:["\u7f16\u7a0b","typescript"]},l=void 0,i={unversionedId:"\u7a0b\u5e8f\u76f8\u5173/Type_Challenges",id:"\u7a0b\u5e8f\u76f8\u5173/Type_Challenges",title:"Type_Challenges",description:"TypeScript Challenges \u7b14\u8bb0",source:"@site/docs/\u7a0b\u5e8f\u76f8\u5173/Type_Challenges.md",sourceDirName:"\u7a0b\u5e8f\u76f8\u5173",slug:"/\u7a0b\u5e8f\u76f8\u5173/Type_Challenges",permalink:"/\u7a0b\u5e8f\u76f8\u5173/Type_Challenges",draft:!1,editUrl:"https://github.com/weixiabing/weixiabing.github.io/tree/source-main/docs/\u7a0b\u5e8f\u76f8\u5173/Type_Challenges.md",tags:[{label:"\u7f16\u7a0b",permalink:"/tags/\u7f16\u7a0b"},{label:"typescript",permalink:"/tags/typescript"}],version:"current",frontMatter:{description:"TypeScript Challenges \u7b14\u8bb0",keywords:["typescript"],image:"https://picgo-1259617372.cos.ap-beijing.myqcloud.com/Picgo/2022/01/19-11-28-23-404Lab.jpeg",tags:["\u7f16\u7a0b","typescript"]},sidebar:"defaultSidebar",previous:{title:"TypeScript\u7b14\u8bb0",permalink:"/\u7a0b\u5e8f\u76f8\u5173/TypeScript\u7b14\u8bb0"},next:{title:"Vue \u7b14\u8bb0",permalink:"/\u7a0b\u5e8f\u76f8\u5173/Vue \u7b14\u8bb0"}},s={},o=[{value:"189. Easy Await",id:"189-easy-await",level:2},{value:"014. Easy First",id:"014-easy-first",level:2},{value:"015. Last of Array",id:"015-last-of-array",level:2},{value:"043. Easy Exclude",id:"043-easy-exclude",level:2},{value:"018. Tuple Length",id:"018-tuple-length",level:2},{value:"004. Easy Pick",id:"004-easy-pick",level:2},{value:"007.",id:"007",level:2},{value:"008. Easy If",id:"008-easy-if",level:2},{value:"898 Easy Includes",id:"898-easy-includes",level:2}],c={toc:o};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("img",{className:"Badges",src:"https://picgo-1259617372.cos.ap-beijing.myqcloud.com/logo_chen_%E7%B4%AB%E8%89%B2.svg"}),(0,r.kt)("img",{className:"Badges",src:"https://api.netlify.com/api/v1/badges/62b2ea8d-7e62-49d1-bb5a-b507b01377af/deploy-status"}),(0,r.kt)("h2",{id:"189-easy-await"},"189. Easy Await"),(0,r.kt)("p",null,"If we have a type which is wrapped type like Promise. How we can get a type which is inside the wrapped type? For example if we have ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<ExampleType>")," how to get ExampleType?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type X = Promise<string>\ntype Y = Promise<{ field: number }>\ntype Z = Promise<Promise<string | number>>\n\ntype cases = [\n  Expect<Equal<MyAwaited<X>, string>>,\n  Expect<Equal<MyAwaited<Y>, { field: number }>>,\n  Expect<Equal<MyAwaited<Z>, string | number>>,\n]\n\n// @ts-expect-error\ntype error = MyAwaited<number>\n")),(0,r.kt)("p",null,"\u76f4\u767d\u7684\u8bf4\uff0c\u9700\u8981\u5b9e\u73b0 ",(0,r.kt)("inlineCode",{parentName:"p"},"MyAwaited<Promise<string>>")," \u7684\u7ed3\u679c\u4e3a string\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MyAwaited<Promise<ExampleType>>")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"ExampleType")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u89e3\u9898\u601d\u8def\uff1a")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5224\u65ad T \u662f\u5426\u662f Promise \u7c7b\u578b\uff0c\u5982\u679c\u662f Promise \u7c7b\u578b\uff0c\u8fd4\u56de Promise \u7c7b\u578b\u63a8\u65ad X ,\u5982\u679c\u4e0d\u662f Promise \u7c7b\u578b\uff0c\u5219\u8fd4\u56de T")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type MyAwaited<T> = T extends Promise<infer X> ? X : T\n")),(0,r.kt)("p",null,"\u8fd9\u6837\u53ea\u80fd\u901a\u8fc7 X\uff0cY \u7684\u6d4b\u8bd5\u7528\u4f8b\uff08\u9898\u76ee\u63cf\u8ff0\u4e2d\u7684\u6d4b\u8bd5\u7528\u4f8b\uff09, ",(0,r.kt)("strong",{parentName:"p"},"\u65e0\u6cd5\u5904\u7406\u5d4c\u5957")," Promise \u548c \u9519\u8bef\u60c5\u51b5\uff08T \u4e0d\u662f Promise \u9700\u629b\u51fa\u9519\u8bef\uff09"),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"\u5229\u7528\u9012\u5f52\u7684\u601d\u8def,\u5982\u679c T \u662f Promise \u7c7b\u578b\uff0c\u8c03\u7528\u81ea\u8eab\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type MyAwaited<T> = T extends Promise<infer X> ? MyAwaited<T> : T\n")),(0,r.kt)("p",null,"\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7 X,Y,Z \u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u867d\u7136\u5224\u65ad\u4e86 T \u662f\u5426\u662f Promise\uff0c\u4f46\u65e0\u6cd5\u5904\u7406 T \u4e0d\u662f Promise \u7684\u60c5\u51b5\u3002"),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"\u53ef\u4ee5\u901a\u8fc7\u9650\u5b9a T \u7684\u7c7b\u578b")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type MyAwaited<T extends Promise<unknown>> = T extends Promise<infer X> ? MyAwaited<X> : T //\u62a5\u9519\n")),(0,r.kt)("p",null,"\u8fd9\u6837\u5b9e\u9645\u4e0a\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u5df2\u7ecf\u9650\u5b9a\u4e86 T \u4e3a Promise, \u4f46\u8c03\u7528\u81ea\u8eab\u65f6\uff0cX \u6709\u53ef\u80fd\u4e0d\u662f Promise"),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"\u6240\u4ee5\u9700\u8981\u5bf9 X \u518d\u8fdb\u884c\u5224\u65ad")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type MyAwaited<T extends Promise<unknown>> = T extends Promise<infer X>\n  ? X extends Promise<unknown>\n    ? MyAwaited<X>\n    : X\n  : never\n")),(0,r.kt)("p",null,"\u7531\u4e8e\u6700\u5916\u5c42\u7684\u4e09\u5143\u8fd0\u7b97\u7684\u5426\u5b9a\u903b\u8f91\u5e76\u4e0d\u4f1a\u6267\u884c\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u5176\u6539\u4e3a never\uff08\u6216\u8005\u4efb\u4f55\u7c7b\u578b\u90fd\u53ef\u4ee5\uff09\u3002"),(0,r.kt)("p",null,"\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7\u5168\u90e8\u6d4b\u8bd5\u3002"),(0,r.kt)("h2",{id:"014-easy-first"},"014. Easy First"),(0,r.kt)("p",null,"Implement a generic ",(0,r.kt)("inlineCode",{parentName:"p"},"First<T>")," that takes an Array ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," and returns it's first element's type."),(0,r.kt)("p",null,"For example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type arr1 = ['a', 'b', 'c']\ntype arr2 = [3, 2, 1]\n\ntype head1 = First<arr1> // expected to be 'a'\ntype head2 = First<arr2> // expected to be 3\ntype head2 = First<arr2> // expected to be never\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u76f4\u63a5\u83b7\u53d6\u7b2c 1 \u4e2a\u5143\u7d20\u3002"),(0,r.kt)("p",{parentName:"li"},"\u4e0d\u8fc7\u5982\u679c T \u662f\u7a7a\u6570\u7ec4\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de undefined, \u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type First<T extends any[]> = T[0]\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u5224\u65ad T \u662f\u5426\u4e3a\u7a7a\u6570\u7ec4"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type First<T extends any[]> = T extends {} : never : T[0]\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u5224\u65ad\u6570\u7ec4\u957f\u5ea6\u662f\u5426\u4e3a 0"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type First<T extends any[]> = T['length'] extends 0 ? never : T[0]\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"infer"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type First<T extends any[]> = T entends [infer First,...infer Rest] ? First : never\n")))),(0,r.kt)("h2",{id:"015-last-of-array"},"015. Last of Array"),(0,r.kt)("p",null,"Implement a generic ",(0,r.kt)("inlineCode",{parentName:"p"},"Last<T>")," that takes an Array ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," and returns its last element."),(0,r.kt)("p",null,"For example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type arr1 = ['a', 'b', 'c']\ntype arr2 = [3, 2, 1]\n\ntype tail1 = Last<arr1> // expected to be 'c'\ntype tail2 = Last<arr2> // expected to be 1\n")),(0,r.kt)("p",null,"\u4e0e\u7b2c 14 \u9898\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u4f7f\u7528 infer\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Last<T extends any[]> = T extends [...infer Rest, infer Last] ? Last : never\n")),(0,r.kt)("h2",{id:"043-easy-exclude"},"043. Easy Exclude"),(0,r.kt)("p",null,"Implement the built-in Exclude<T, U>"),(0,r.kt)("p",null,"Exclude from T those types that are assignable to U"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type cases = [\n  Expect<Equal<MyExclude<'a' | 'b' | 'c', 'a'>, Exclude<'a' | 'b' | 'c', 'a'>>>,\n  Expect<Equal<MyExclude<'a' | 'b' | 'c', 'a' | 'b'>, Exclude<'a' | 'b' | 'c', 'a' | 'b'>>>,\n  Expect<Equal<MyExclude<string | number | (() => void), Function>, Exclude<string | number | (() => void), Function>>>,\n]\n")),(0,r.kt)("p",null,"\u5b9e\u73b0\u4e00\u4e2a Exclude\uff0c\u4ece T \u4e2d\u6392\u9664\u6389\u53ef\u4ee5\u5206\u914d\u7ed9 U \u7684\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c"),(0,r.kt)("p",null,"\u5982\u679c T \u4e2d\u51fa\u73b0 U \u4e2d\u7684\u7c7b\u578b\uff0c\u5219\u5c06 T \u4e2d\u7684\u8fd9\u4e2a\u7c7b\u578b\u8fc7\u6ee4\u6389\u3002"),(0,r.kt)("p",null,"\u5982\u679c U \u4e2d\u7684\u7c7b\u578b\u6ca1\u6709\u5728 T \u4e2d\u51fa\u73b0\uff0c\u5219\u5ffd\u7565\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u4f8b\u5982\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let a: Exclude<string | number | object, string | Function> // let a = number|object\nlet b: MyExclude<string | number | object, string | Function> // let b = number|object\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u7b54\u6848\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type MyExclude<T, U> = T extends U ? never : T\n")),(0,r.kt)("p",null,"TS \u5b98\u65b9\u5b9e\u73b0\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"Exclue<UnionType,ExcludedMembers>")," Utility Types:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#excludeuniontype-excludedmembers"},"https://www.typescriptlang.org/docs/handbook/utility-types.html#excludeuniontype-excludedmembers")),(0,r.kt)("h2",{id:"018-tuple-length"},"018. Tuple Length"),(0,r.kt)("p",null,"For given a tuple, you need create a generic ",(0,r.kt)("inlineCode",{parentName:"p"},"Length"),", pick the length of the tuple"),(0,r.kt)("p",null,"For example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type tesla = ['tesla', 'model 3', 'model X', 'model Y']\ntype spaceX = ['FALCON 9', 'FALCON HEAVY', 'DRAGON', 'STARSHIP', 'HUMAN SPACEFLIGHT']\n\ntype teslaLength = Length<tesla> // expected 4\ntype spaceXLength = Length<spaceX> // expected 5\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u7b54\u6848\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Length<T extends readonly any[]> = T['length']\n")),(0,r.kt)("p",null,"\u56e0\u4e3a tuple \u7c7b\u578b\uff0c\u6240\u4ee5\u9700\u8981 readonly \u3002"),(0,r.kt)("h2",{id:"004-easy-pick"},"004. Easy Pick"),(0,r.kt)("p",null,"Implement the built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"Pick<T, K>")," generic without using it."),(0,r.kt)("p",null,"Constructs a type by picking the set of properties ",(0,r.kt)("inlineCode",{parentName:"p"},"K")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"T")),(0,r.kt)("p",null,"For example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyPick<Todo, 'title' | 'completed'>\n\nconst todo: TodoPreview = {\n  title: 'Clean room',\n  completed: false,\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u7b54\u6848\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type MyPick<T, U extends keyof T> = {\n  [P in U]: T[P]\n}\n")),(0,r.kt)("p",null,"TS \u5b98\u65b9\u5b9e\u73b0\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"Pick<Type,Keys>")," \u7684 Utility Types"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys"},"https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys")),(0,r.kt)("h2",{id:"007"},"007."),(0,r.kt)("h2",{id:"008-easy-if"},"008. Easy If"),(0,r.kt)("p",null,"Implement a utils ",(0,r.kt)("inlineCode",{parentName:"p"},"If")," which accepts condition ",(0,r.kt)("inlineCode",{parentName:"p"},"C"),", a truthy return type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", and a falsy return type ",(0,r.kt)("inlineCode",{parentName:"p"},"F"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"C")," is expected to be either ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," while ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"F")," can be any type."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [Expect<Equal<If<true, 'a', 'b'>, 'a'>>, Expect<Equal<If<false, 'a', 2>, 2>>]\n\n// @ts-expect-error\ntype error = If<null, 'a', 'b'>\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u7b54\u6848\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type If<B extends boolean, T, U> = B extends true ? T : U\n")),(0,r.kt)("p",null,"\u8fd9\u9053\u9898\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u77e5\u8bc6\u70b9\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"null")," \u7684\u7c7b\u578b\u3002"),(0,r.kt)("p",null,"\u5982\u679c\u5173\u95ed\u4e86 ",(0,r.kt)("inlineCode",{parentName:"p"},"strictNullChecks")," \u9009\u9879\uff0c\u5219 null \u7684\u4f1a\u5224\u5b9a\u4e3a true"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type t = If<null, true, false> // t \u7684\u7c7b\u578b\u662f true\n")),(0,r.kt)("p",null,"\u5173\u4e8e null \u7684\u7c7b\u578b\uff0cts \u6587\u6863\u4e2d\u6709\u660e\u786e\u8bf4\u660e\uff1a"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When ",(0,r.kt)("inlineCode",{parentName:"p"},"strictNullChecks")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," are effectively ignored by the language. This can lead to unexpected errors at runtime."),(0,r.kt)("p",{parentName:"blockquote"},"When ",(0,r.kt)("inlineCode",{parentName:"p"},"strictNullChecks")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," have their own distinct types and you\u2019ll get a type error if you try to use them where a concrete value is expected."),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#strictNullChecks"},"https://www.typescriptlang.org/tsconfig#strictNullChecks")),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/type-compatibility.html#any-unknown-object-void-undefined-null-and-never-assignability"},"https://www.typescriptlang.org/docs/handbook/type-compatibility.html#any-unknown-object-void-undefined-null-and-never-assignability"))),(0,r.kt)("h2",{id:"898-easy-includes"},"898 Easy Includes"))}u.isMDXComponent=!0}}]);